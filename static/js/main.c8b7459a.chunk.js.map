{"version":3,"sources":["Adria-logo.png","App.js","reportWebVitals.js","index.js"],"names":["scheduler","createScheduler","worker","createWorker","App","props","state","loading","loadingMessage","ocrResult","started","terminated","isFullScreen","deviceOrientation","window","screen","orientation","angle","webcamRef","React","createRef","canvasRef","doOCR","bind","handleStart","loadTesseract","reset","addEventListener","event","setState","target","console","log","this","a","current","video","readyState","canvas","videoWidth","videoHeight","width","height","getContext","drawImage","addJob","text","data","length","e","preventDefault","timesRun","interval","setInterval","terminate","clearInterval","i","load","loadLanguage","initialize","addWorker","elFullScreenRef","fullScreen","elRef","Modal","show","onHide","className","keyboard","Body","Row","Col","xs","md","style","fontSize","Navbar","bg","variant","Brand","onClick","alt","src","logo","Container","fluid","sm","fullScreenSupported","ref","requestOrExitFullScreenByElement","id","muted","audio","videoConstraints","aspectRatio","display","left","top","right","bottom","margin","disabled","onChange","name","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8b7459a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Adria-logo.94b4bae1.png\";","import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport './App.css';\nimport FullScreen, { fullScreenSupported } from 'react-request-fullscreen'\nimport {\n  Row,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Modal,\n  Button\n} from 'react-bootstrap';\nimport logo from './Adria-logo.png';\nconst scheduler = createScheduler();\nconst worker = createWorker();\n\n// const worker = createWorker({\n//   logger: m => console.log(m),\n// });\n\n// let timerId = null;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      loadingMessage: \"\",\n      ocrResult: \"\",\n      started: false,\n      terminated: false,\n      isFullScreen: false,\n      // progress: 0,\n      deviceOrientation: window.screen.orientation.angle,\n    }\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n\n    this.doOCR = this.doOCR.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.loadTesseract = this.loadTesseract.bind(this);\n    this.reset = this.reset.bind(this);\n\n    window.addEventListener('orientationchange', (event) => {\n      this.setState({deviceOrientation: event.target.screen.orientation.angle});\n      console.log(\"the orientation of the device is now \" + event.target.screen.orientation.angle);\n\n    });\n  }\n  componentDidMount() {\n    // this.setState({loading: false, loadingMessage: ''});\n      \n  //     // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n  //     // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n\n    this.loadTesseract();\n\n  }\n\n\n\n  async doOCR () {\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n    // if (this.state.imageSrc !== null && this.state.imageSrc !== \"\") {\n\n      const video = this.webcamRef.current.video;\n      const canvas = this.canvasRef.current;\n\n       // Get Video Properties\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n\n      // Set video width\n      // this.webcamRef.current.video.width = videoWidth;\n      // this.webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvas.width = videoWidth;\n      canvas.height = videoHeight;\n\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      \n      const { data: { text } } = await scheduler.addJob('recognize', canvas);\n\n      // // text.split('\\n').forEach((line) => {\n      if(text && text !== \"\" && text.length > 0) {\n        console.log(text);\n        this.setState({ocrResult: this.state.ocrResult + text});\n      }}\n  };\n\n  \n  handleStart(e){\n    e.preventDefault();\n    this.setState({started: true, loading: true}, () => {\n      this.setState({loading: false});\n      let timesRun = 0;\n      let interval = setInterval(async () => {\n        timesRun += 1;\n        if (timesRun === 400) {\n          await scheduler.terminate();\n          clearInterval(interval);\n          this.setState({terminated: true});\n        }\n        this.doOCR();\n      }, 100);\n    }); \n  }\n  \n  async loadTesseract() {\n    this.setState({loading: true, loadingMessage: \"Loading Tesseract...\"});\n      for (let i = 0; i < 4; i++) {\n        // const worker = createWorker({\n        //   logger: m => {\n        //     // console.log(m);\n        //     this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n        //   }\n        // });\n        await worker.load();\n        await worker.loadLanguage('eng');\n        await worker.initialize('eng');\n        scheduler.addWorker(worker);\n      }\n\n      this.setState({loading: false,});\n  }\n\n  async reset(e) {\n    e.preventDefault();\n    await scheduler.terminate();\n    this.setState({started: false, terminated: false, ocrResult: \"\"}, this.loadTesseract);\n  }\n\n  onFullScreenChange (isFullScreen) {\n    this.setState({\n      isFullScreen: isFullScreen\n    })\n  }\n\n\n\n  requestOrExitFullScreenByElement () {\n    this.elFullScreenRef.fullScreen(this.elRef)\n  }\n  \n  render() {\n    const isFullScreen  = this.state.isFullScreen\n    const videoConstraintsPortrait = {\n      width: 720, /*{ min: 400, ideal: 1080 },*/\n    //\n      //\n      height: 1280, /*{ min: 640, ideal: 1920, max: 1920 },*/\n     // facingMode: \"environment\",\n      aspectRatio: 1.777777778,\n      // frameRate: { max: 30 },\n    };\n\n    const videoConstraintsLandscape = {\n      height: 720, ///*{ min: 400, ideal: 1080 },*/\n     width: 1280, /*{ min: 640, ideal: 1920, max: 1920 },*/\n      facingMode: \"environment\",\n      aspectRatio: 1.777777778,\n      // frameRate: { max: 30 },\n    };\n\n\n    return (\n      <div>\n\n        <Modal show={this.state.loading} onHide={()=>{}} className=\"loadingModal\" keyboard={false}>\n          <Modal.Body>\n              <Row>\n                  <Col xs={12} md={12}>\n                      <div className=\"spinner\">\n                          <span style={{fontSize: '11px'}}>{this.state.loadingMessage}</span>\n                      </div>\n                  </Col>\n              </Row>\n          </Modal.Body>\n        </Modal>\n\n        {this.state.deviceOrientation === 0 &&\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand onClick={(e) => {/*this.doOCR();*/ this.reset(e)}}>\n            <img\n            alt=\"\"\n            src={logo}\n            width=\"135\"\n            height=\"43\"\n            className=\"d-inline-block align-top\"\n            />\n          </Navbar.Brand>\n        </Navbar>\n        }\n        <Container fluid>\n        {this.state.started === true ?\n        <div>\n          {this.state.terminated === false ?\n          <Row>\n            <Col sm=\"12\" className=\"fill-window\" >\n              <div className='app'>\n                <p>Browser support fullscreen feature: {`${fullScreenSupported()}`}</p>\n                <p>Browser is fullscreen: {`${isFullScreen}`}</p>\n\n\n\n\n                <FullScreen ref={ref => { this.elFullScreenRef = ref }}>\n           <div ref={ref => { this.elRef = ref }}\n                onClick={this.requestOrExitFullScreenByElement.bind(this)}>\n             <Webcam\n                 id=\"myCam\"\n                 ref={this.webcamRef}\n                 muted={false}\n                 audio={false}\n                 videoConstraints={videoConstraintsPortrait}\n                 style={\n                   {\n                     width:\"100%\"\n                   }\n                 }\n\n             />\n             {!isFullScreen ? 'Request FullScreen by Element' : 'Exit FullScreen by Element'}\n\n\n           </div>\n\n                </FullScreen>\n\n              </div>\n\n                <canvas\n                id=\"myCanvas\"\n                ref={this.canvasRef}\n                style={{\n                  // backgroundColor: \"red\",\n                  display: \"none\",\n                  // position: \"absolute\",\n                  // marginLeft: \"auto\",\n                  // marginRight: \"auto\",\n                  left: 0,\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                  // textAlign: \"center\",\n                  // zIndex: 10,\n                  width: \"100%\",\n                  height: \"auto\",\n                }}\n              />\n            </Col>\n          </Row>\n          :\n          <Row>\n            <Col>\n              <div >\n              <textarea \n                style={{\n                  margin: \"5px 0\",\n                  width:\"100%\", \n                  height: \"382px\",\n                  fontSize: \"13px\"\n                }}\n                disabled\n                onChange={(e) =>{console.log(e.target.name)} }\n                value={this.state.ocrResult} />\n              </div>\n            </Col>\n          </Row>\n          }\n        </div>\n        : \n        <Row>\n          <Col>\n            <div className=\"startBtnWrapper\" >\n              <button className=\"startBtn\" onClick={(e) => {this.handleStart(e);}} >START</button>\n            </div>\n          </Col>\n        </Row>\n        }\n        {this.state.deviceOrientation === 0 &&\n        <Row className=\"footer\">\n          <Col>\n            <p>Adria Business & Technology</p>\n            <p>2021 © All rights reserved.</p>\n          </Col>\n        </Row> \n        }\n        </Container>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}